openapi: '3.0.2'
info:
  title: Handiwork API
  description: The handiwork app provides various API resources to connect users with service providers for various tasks like carpentry, plumbing, and more.
  version: '1.0'
servers:
  - url: http://localhost:3000/
    description: Localhost development server
#   - url: https://smsj-men-restapi.herokuapp.com/api/
#     description: Heroku remote server
components:
  responses:
    ForbiddenError:
      description: Access denied
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: 'Only admin users can access this endpoint'
  securitySchemes:
    adminAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: Admin authentication
    name:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    User:
      type: object
      properties:
        firstName:
          type: string
          minLength: 3
          maxLength: 30
        lastName:
          type: string
          minLength: 3
          maxLength: 30
        email:
          type: string
          format: email
        address:
          type: string
        password:
          type: string
          minLength: 8
        confirmPassword:
          type: string
        role:
          type: string
          enum:
            - user
            - admin
    ServiceProvider:
      allOf:
        - $ref: '#/components/schemas/User'
        - type: object
          properties:
            services:
              type: array
              items:
                type: object
                properties:
                  name:
                    type: string
                  description:
                    type: string
                  category:
                    type: string
                  Price:
                    type: object
                    properties:
                      type:
                        type: string
                        default: fixed
                      value:
                        type: number
    Review:
      type: object
      properties:
        review:
          type: string
        rating:
          type: number
          minimum: 1
          maximum: 5
        serviceProvider:
          type: string
          format: uuid
          description: The ID of the service provider the review belongs to
        user:
          type: string
          format: uuid
          description: The ID of the user who created the review

paths:
  /auth/signup:
    post:
      summary: Register a new user
      description: This endpoint allows users to sign up by creating a new account.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'

      responses:
        201:
          description: User created succesfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                  _id:
                    type: string
  /auth/login:
    post:
      summary: Login a User
      description: This endpoint is used to authenticate and login a user.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string

      responses:
        200:
          description: User logged in succesfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                  data:
                    type: string
        400:
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Invalid data provided

  /auth/forgotPassword:
    post:
      summary: Request a password reset
      description: This endpoint allows users to request a password reset by sending a reset link to the provided email address.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
      responses:
        200:
          description: Token sent to email!
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                  data:
                    type: string
        404:
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: There was an error sending the email, try again later
  /auth/resetPassword:
    patch:
      summary: Reset user password
      description: This endpoint allows users to reset their password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
                confirmPassword:
                  type: string
      responses:
        200:
          description: Token sent to email!
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                  data:
                    type: string
        404:
          description: Not found!
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Token is invalid or expired!
  /users:
    get:
      summary: Get all users
      description: Retrieve a list of all users as JSON objects
      security:
        - adminAuth: []
      responses:
        200:
          description: List of users retrieved in an array
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        403:
          $ref: '#/components/responses/ForbiddenError'
