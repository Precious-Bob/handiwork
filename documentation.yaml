openapi: '3.0.2'
info:
  title: Handiwork API
  description: The handiwork app provides various API resources to connect users with service providers for various tasks like carpentry, plumbing, and more.
  version: '1.0'
servers:
  - url: http://handiwork-api.onrender.com/
    description: Render remote server
  - url: http://localhost:3000/api/v1/
    description: Localhost development server
components:
  responses:
    DocumentNotFound:
      description: User not found
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: 'Document with ID {id} not found'
    UnauthorizedError:
      description: Unauthorized
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: 'Authentication required to access this endpoint'
    ForbiddenError:
      description: Access denied
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: 'Only admin users can access this endpoint'
  securitySchemes:
    userAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: User authentication
    adminAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: Admin authentication
    name:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    User:
      type: object
      properties:
        firstName:
          type: string
          minLength: 3
          maxLength: 30
        lastName:
          type: string
          minLength: 3
          maxLength: 30
        email:
          type: string
          format: email
        address:
          type: string
        password:
          type: string
          minLength: 8
        confirmPassword:
          type: string
        role:
          type: string
          enum:
            - user
            - admin
    ServiceProvider:
      allOf:
        - $ref: '#/components/schemas/User'
        - type: object
          properties:
            services:
              type: array
              items:
                type: object
                properties:
                  name:
                    type: string
                  description:
                    type: string
                  category:
                    type: string
                  Price:
                    type: object
                    properties:
                      type:
                        type: string
                        default: fixed
                      value:
                        type: number
    Review:
      type: object
      properties:
        review:
          type: string
        rating:
          type: number
          minimum: 1
          maximum: 5
        serviceProvider:
          type: string
          format: uuid
          description: The ID of the service provider the review belongs to
        user:
          type: string
          format: uuid
          description: The ID of the user who created the review

paths:
  /auth/signup:
    post:
      summary: Register a new user
      description: This endpoint allows users to sign up by creating a new account.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'

      responses:
        201:
          description: User created succesfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User created successfully!
                  _id:
                    type: string
                    description: The newly created user's ID
  /auth/login:
    post:
      summary: Login a User
      description: This endpoint is used to authenticate and login a user.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
      responses:
        200:
          description: User logged in succesfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: Authentication token
                  user:
                    type: object
                    description: User data
        400:
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Invalid data provided

  /auth/forgotPassword:
    post:
      summary: Request a password reset
      description: This endpoint allows users to request a password reset by sending a reset link to the provided email address.
      security:
        - userAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
      responses:
        200:
          description: Token sent to email!
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Password reset link sent to your email!
                  token:
                    type: string
        400:
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: There was an error sending the email, try again later
  /auth/resetPassword:
    patch:
      summary: Reset user password
      description: This endpoint allows users to reset their password
      security:
        - userAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
                confirmPassword:
                  type: string
      responses:
        200:
          description: Token sent to email!
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                  data:
                    type: string
        404:
          description: Not found!
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Token is invalid or expired!
  /users:
    get:
      summary: Get all users
      description: Retrieve a list of all users as JSON objects
      security:
        - adminAuth: []
      responses:
        200:
          description: List of users retrieved in an array
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        403:
          $ref: '#/components/responses/ForbiddenError'
    post:
      summary: Create a new user
      description: Create a new user (only accessible by admins)
      security:
        - adminAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        201:
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        401:
          $ref: '#/components/responses/UnauthorizedError'
  /users/{id}:
    get:
      summary: Get a specific user
      description: Retrieve a single user by ID
      parameters:
        - in: path
          name: id
          required: true
          description: The ID of the user to retrieve
          schema:
            type: integer
      security:
        - adminAuth: []
      responses:
        200:
          description: User retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        403:
          $ref: '#/components/responses/ForbiddenError'
        404:
          $ref: '#/components/responses/DocumentNotFound'

    delete:
      summary: Delete a user
      description: Delete a user by ID
      parameters:
        - in: path
          name: id
          required: true
          description: The ID of the user to delete
          schema:
            type: integer
      security:
        - userAuth: []
      responses:
        204:
          description: User deleted successfully
        403:
          $ref: '#/components/responses/ForbiddenError'
        404:
          $ref: '#/components/responses/DocumentNotFound'
  /users/me:
    get:
      summary: Get the current user
      description: Retrieve the authenticated user's data
      security:
        - userAuth: []
      responses:
        200:
          description: User data retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        401:
          $ref: '#/components/responses/UnauthorizedError'
  /users/updateMe:
    patch:
      summary: Update the current user
      description: Update the authenticated user's data
      security:
        - userAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        200:
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/DocumentNotFound'
  /users/updateMyPassword:
    patch:
      summary: Update the current user's password
      description: Update the authenticated user's password
      security:
        - userAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                currentPassword:
                  type: string
                  format: password
                newPassword:
                  type: string
                  format: password
                confirmPassword:
                  type: string
                  format: password
      responses:
        200:
          description: Password updated successfully
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/DocumentNotFound'
  /service-providers:
    post:
      summary: Create a new service provider
      description: Create a new service provider
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServiceProvider'
      responses:
        201:
          description: Service provider created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceProvider'
        400:
          description: Bad request
    get:
      summary: Get all service providers
      description: Retrieve a list of all service providers
      responses:
        200:
          description: List of service providers
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ServiceProvider'
        403:
          $ref: '#/components/responses/ForbiddenError'
  /service-providers/{id}:
    get:
      summary: Get a service provider by ID
      description: Retrieve a single service provider by ID
      parameters:
        - in: path
          name: id
          required: true
          description: The ID of the service provider
          schema:
            type: string
      responses:
        200:
          description: Service provider found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceProvider'
        404:
          $ref: '#/components/responses/DocumentNotFound'
        500:
          description: Internal Server Error
    patch:
      summary: Update a service provider
      description: Update an existing service provider
      parameters:
        - in: path
          name: id
          required: true
          description: The ID of the service provider
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServiceProvider'
      responses:
        200:
          description: Service provider updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceProvider'
        404:
          $ref: '#/components/responses/DocumentNotFound'
        500:
          description: Internal Server Error
    delete:
      summary: Delete a service provider
      description: Delete a single service provider by ID
      parameters:
        - in: path
          name: id
          required: true
          description: The ID of the service provider
          schema:
            type: string
      responses:
        204:
          description: Service provider deleted successfully
        404:
          $ref: '#/components/responses/DocumentNotFound'
        500:
          description: Internal Server Error
  /serviceProviders/{serviceProviderId}/reviews:
    post:
      summary: Create a review for a service provider
      description: Create a new review for a service provider
      security:
        - userAuth: []
      parameters:
        - in: path
          name: serviceProviderId
          required: true
          description: The ID of the service provider
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                review:
                  type: string
                  description: The review text
                rating:
                  type: integer
                  description: The rating (1-5)
      responses:
        201:
          description: Review created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    description: The ID of the review
                  review:
                    type: string
                    description: The review text
                  rating:
                    type: integer
                    description: The rating (1-5)
        400:
          description: Bad request
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          description: Service provider not found
        500:
          description: Internal Server Error
    get:
      summary: Get all reviews for a service provider
      description: Retrieve a list of all reviews for a service provider
      security:
        - adminAuth: []
      parameters:
        - in: path
          name: serviceProviderId
          required: true
          description: The ID of the service provider
          schema:
            type: string
      responses:
        200:
          description: List of reviews
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      description: The ID of the review
                    review:
                      type: string
                      description: The review text
                    rating:
                      type: integer
                      description: The rating (1-5)
        404:
          $ref: '#/components/responses/UnauthorizedError'
        500:
          description: Internal Server Error

  /reviews:
    post:
      summary: Create a new review
      description: Create a new review for a service provider
      security:
        - userAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                serviceProviderId:
                  type: string
                  description: The ID of the service provider being reviewed
                rating:
                  type: integer
                  description: The rating given (1-5)
                comment:
                  type: string
                  description: The review comment
      responses:
        201:
          description: Review created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    description: The ID of the review
                  serviceProviderId:
                    type: string
                    description: The ID of the service provider being reviewed
                  rating:
                    type: integer
                    description: The rating given (1-5)
                  comment:
                    type: string
                    description: The review comment
        400:
          description: Bad request
        401:
          $ref: '#/components/responses/UnauthorizedError'
    get:
      summary: Get all reviews
      description: Retrieve a list of all reviews
      security:
        - userAuth: []
      responses:
        200:
          description: List of reviews
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      description: The ID of the review
                    serviceProviderId:
                      type: string
                      description: The ID of the service provider being reviewed
                    rating:
                      type: integer
                      description: The rating given (1-5)
                    comment:
                      type: string
                      description: The review comment
        401:
          $ref: '#/components/responses/UnauthorizedError'
        500:
          description: Internal Server Error
  /reviews/{id}:
    get:
      summary: Get a review by ID
      description: Retrieve a single review by ID
      parameters:
        - in: path
          name: id
          required: true
          description: The ID of the review
          schema:
            type: string
      responses:
        200:
          description: Review found
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    description: The ID of the review
                  serviceProviderId:
                    type: string
                    description: The ID of the service provider being reviewed
                  rating:
                    type: integer
                    description: The rating given (1-5)
                  comment:
                    type: string
                    description: The review comment
        404:
          $ref: '#/components/responses/DocumentNotFound'
        500:
          description: Internal Server Error

    patch:
      summary: Update a review
      description: Update an existing review
      security:
        - userAuth: []
        - adminAuth: []
      parameters:
        - in: path
          name: id
          required: true
          description: The ID of the review
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                rating:
                  type: integer
                  description: The new rating (1-5)
                comment:
                  type: string
                  description: The new review comment
      responses:
        200:
          description: Review updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    description: The ID of the review
                  serviceProviderId:
                    type: string
                    description: The ID of the service provider being reviewed
                  rating:
                    type: integer
                    description: The new rating (1-5)
                  comment:
                    type: string
                    description: The new review comment
        404:
          $ref: '#/components/responses/DocumentNotFound'
        500:
          description: Internal Server Error
    delete:
      summary: Delete a review
      description: Delete an existing review
      security:
        - userAuth: []
        - adminAuth: []
      parameters:
        - in: path
          name: id
          required: true
          description: The ID of the review
          schema:
            type: string
      responses:
        204:
          description: Review deleted successfully
        404:
          $ref: '#/components/responses/DocumentNotFound'
        500:
          description: Internal Server Error
